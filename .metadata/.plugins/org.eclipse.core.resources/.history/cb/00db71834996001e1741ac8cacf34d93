package viva2;
import java.util.*;

public class Viva2Q1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		
		int[][] Arr1 = new int[3][3];
		int[][] Arr2 = new int[3][3];
		
//		Taking array inputs
		System.out.println("Enter first integer array input in the order from up to down and from left to right. Press Enter after each input.");
		for (int i = 0; i < Arr1.length; i++) {
			for (int j = 0; j < Arr1[i].length; j++) {
				Arr1[i][j] = sc.nextInt();
			}
		}
		
		System.out.println("Enter second integer array input in the order from up to down and from left to right. Press Enter after each input.");
		for (int i = 0; i < Arr2.length; i++) {
			for (int j = 0; j < Arr2[i].length; j++) {
				Arr2[i][j] = sc.nextInt();
			}
		}
		
//		Printing out arrays
		System.out.println("Your arrays are ");
		for (int i = 0; i < Arr1.length; i++) {
			for (int j = 0; j < Arr1[i].length; j++) {
				System.out.print(Arr1[i][j] + " ");
			}
			System.out.println();
		}
		
		System.out.println("and");
		for (int i = 0; i < Arr2.length; i++) {
			for (int j = 0; j < Arr2[i].length; j++) {
				System.out.print(Arr2[i][j] + " ");
			}
			System.out.println();
		}
		
//		System.out.println(Arrays.deepToString(Arr1));
	}
	
	public static int[][] addition(int[][] Arr1, int[][] Arr2) {
		int[][] Arr3 = null;
		
		for (int i = 0; i < Arr1.length; i++) {
			for (int j = 0; j < Arr1[i].length; j++) {
				Arr3[i][j] = Arr1[i][j] + Arr2[i][j];
			}
		}
		
		return Arr3;
	}
	
	public static int[][] subtraction(int[][] Arr1, int[][] Arr2) {
		int[][] Arr3 = null;
		
		for (int i = 0; i < Arr1.length; i++) {
			for (int j = 0; j < Arr1[i].length; j++) {
				Arr3[i][j] = Arr1[i][j] - Arr2[i][j];
			}
		}
		
		return Arr3;
}
	
	public static int[][] multiplication(int[][] Arr1, int[][] Arr2) {
		int[][] Arr3 = null;
		
		for (int i = 0; i < Arr1.length; i++) {
			for (int j = 0; j < Arr1[i].length; j++) {
				Arr3[i][j] = Arr1[i][j] * Arr2[i][j];
			}
		}
		
		return Arr3;
	}
	
	public static int[][] determinant() {


		int[][] Arr1 = new int[3][3];
		int[][] Arr3 = new int[2][2];
		
//		Taking array inputs
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter integer array input in the order from up to down and from left to right. Press Enter after each input.");
		for (int i = 0; i < Arr1.length; i++) {
			for (int j = 0; j < Arr1[i].length; j++) {
				Arr1[i][j] = sc.nextInt();
			}
		}
		
		for (int i = 0; i < Arr3.length; i++) {
			for (int j = 0; j < Arr3[i].length; j++) {
				if (i==0 && j==0)
					Arr3[i][j] = Arr1[0][0]*Arr1[1][1] - Arr1[0][1]*Arr1[1][0] + Arr1[0][2]*Arr1[1][0];
				if (i==0 && j==1)
					Arr3[i][j] = Arr1[0][0]*Arr1[1][2] - Arr1[0][1]*Arr1[1][2] + Arr1[0][2]*Arr1[1][1];
				if (i==1 && j==0)
					Arr3[i][j] = Arr1[0][0]*Arr1[2][1] - Arr1[0][1]*Arr1[2][0] + Arr1[0][2]*Arr1[2][0];
				if (i==1 && j==1)
					Arr3[i][j] = Arr1[0][0]*Arr1[2][2] - Arr1[0][1]*Arr1[2][2] + Arr1[0][2]*Arr1[2][1];
			}
		}
		
		return Arr3;
	}
	
	public static int minorDeterminant(int a, int b, int c, int d) {
		return a*d - b*c;
	}
	
//	adjugateMatrix == transposed cofactor matrix
	public static int[][] adjugateMatrix(int[][] Arr) {
		int[][] cofactor = new int[3][3];
		cofactor[0][0] = minorDeterminant(Arr[1][1], Arr[1][2], Arr[2][1], Arr[2][2]);
		cofactor[0][1] = minorDeterminant(Arr[1][0], Arr[1][2], Arr[2][0], Arr[2][2]);
		cofactor[0][2] = minorDeterminant(Arr[1][0], Arr[1][1], Arr[2][0], Arr[2][1]);
		cofactor[1][0] = minorDeterminant(Arr[0][1], Arr[0][2], Arr[2][1], Arr[2][2]);
		cofactor[1][1] = minorDeterminant(Arr[0][0], Arr[0][2], Arr[2][0], Arr[2][2]);
		cofactor[1][2] = minorDeterminant(Arr[0][0], Arr[0][1], Arr[2][0], Arr[2][1]);
		cofactor[2][0] = minorDeterminant(Arr[0][1], Arr[0][2], Arr[1][1], Arr[1][2]);
		cofactor[2][1] = minorDeterminant(Arr[0][0], Arr[0][2], Arr[1][0], Arr[1][2]);
		cofactor[2][2] = minorDeterminant(Arr[0][0], Arr[0][1], Arr[1][0], Arr[1][1]);
		
		
		cofactor[0][1] *= -1;
		cofactor[1][0] *= -1;
		cofactor[1][2] *= -1;
		cofactor[2][1] *= -1;
		
//		transposing the matrix
		int[][] adjugate = null;
		for (int i = 0; i < cofactor.length; i++) {
			for (int j = 0; j < cofactor[i].length; j++) {
				adjugate[i][j] = cofactor[j][i];
			}
		}
		return adjugate;
	}
	
	public static int[][] inverse(int[][] Arr1) {
		
//		Taking array inputs
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter integer array input in the order from up to down and from left to right. Press Enter after each input.");
		for (int i = 0; i < Arr1.length; i++) {
			for (int j = 0; j < Arr1[i].length; j++) {
				Arr1[i][j] = sc.nextInt();
			}
		}
		
	}
}
